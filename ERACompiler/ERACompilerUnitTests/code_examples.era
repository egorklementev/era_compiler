module Math

	routine Sqrt (int varAddr) // Like a pointer *
		int result;
		int n_copy := *number;
		while 1
		loop
			if result * result > n_copy
			do
				break;
			end

			if result * result = n_copy
			do
				result := result + 1;
				break;
			end
			result := resutl + 1;
		end
		result := result - 1;
		*number := result;
	end

	routine Divide (int varAddr, int factor) 
	do
		int varValue = *varAddr;
		if factor = varValue 
		do
			*varAddr := 1;
		else
			if factor > varValue
			do
				*varAddr := 0;
			else
				int result := 1;
				while 1
				loop
					if factor * result > varValue
					do
						break;
					else
						result := result + 1;
					end
				end
				*varAddr := result - 1;
			end
		end
	end

	routine Sort (int[] array, int size)
	do
		int halfSize := size;
		Divide(halfSize, 2);
		FastSort(array, size, halfSize);
	end

	routine FastSort (int[] array, int size, int chosen)
	do
		if size > 1
		do
			int[] first;
			int[] second;
			int s1 := 0;
			int s2 := 0;
			for i from 0 to size
			loop
				if array[i] < array[chosen]
				do
					first[s1] := array[i];
					s1 := s1 + 1;
				end
			end
			for i from 0 to size
			loop
				if array[i] > array[chosen] | array[i] = array[chosen]
				do
					second[s2] := array[i];
					s2 := s2 + 1;
				end
			end
			int halfOf_s1 := s1;
			Divide(halfOf_s1, 2);
			int halfOf_s2 := s2;
			Divide(halfOf_s2, 2);
			FastSort(first, s1, halfOf_s1);
			FastSort(second, s2, halfOf_s2);
			for i from 0 to size
			loop
				if i < s1
				do
					array[i] := first[i];
				else
					array[i] := second[i - s2];
				end
			end
		end
	end

	
	
end
