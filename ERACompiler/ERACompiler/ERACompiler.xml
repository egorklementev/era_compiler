<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ERACompiler</name>
    </assembly>
    <members>
        <member name="T:ERACompiler.Modules.Compiler">
            <summary> 
            The main abstraction class of the compiler. 
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.Compiler.#ctor">
            <summary>
            Constructor for the compiler. Initializates all the modules such as Lexical Analyzer, etc.
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.Compiler.Compile(System.String,ERACompiler.Modules.Compiler.CompilationMode)">
            <summary> 
             Main compiler function.       
            </summary>
            <returns>
             A string with the compiled source code. It is ready to be written to the file.
            </returns>
        </member>
        <member name="M:ERACompiler.Modules.Compiler.Compile(System.String)">
            <summary>
            General compilation function. Returns generated assembly code.
            </summary>
            <param name="sourceCode">A source code from a file.</param>
            <returns>Generated string of assembly commands.</returns>
        </member>
        <member name="T:ERACompiler.Modules.Compiler.CompilationMode">
            <summary>
            Represents a level of compilation.
            For example syntax means lexical analysis plus syntax analysis.
            </summary>
        </member>
        <member name="T:ERACompiler.Modules.Generator">
            <summary>
            Generates the actual assembly code
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.Generator.#ctor">
            <summary>
            Generator constructor
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.Generator.GetAssemblyCode(ERACompiler.Structures.AASTNode)">
            <summary>
            Constructs actual assembly code from the annotated AST.
            </summary>
            <param name="root">The root node of the AAST.</param>
            <returns>A string containing assembly code build using AAST.</returns>
        </member>
        <member name="T:ERACompiler.Modules.LexicalAnalyzer">
            <summary>
            Contains functionality for conversion of source code of the program to the list of tokens.
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.LexicalAnalyzer.GetTokenList(System.String)">
            <summary>
            Converts a program source code to the list of tokens.
            </summary>
            <param name="sourceCode">A source code of a program loaded from the file.</param>
            <returns>A list of tokens constructed from the source code.</returns>
        </member>
        <member name="M:ERACompiler.Modules.LexicalAnalyzer.Analyze(System.Collections.Generic.List{ERACompiler.Structures.Token})">
            <summary>
            Used for correction and analysis of the token list.
            </summary>
            <param name="list">List with tokens to be analyzed.</param>
            <returns>Compressed and improved token list.</returns>
        </member>
        <member name="M:ERACompiler.Modules.LexicalAnalyzer.IsAbleToDetermineToken(System.Char)">
            <summary>
            Used for token determination.
            </summary>
            <returns>Whether or not is it possible to understand what token has to be added to the list.</returns>
        </member>
        <member name="M:ERACompiler.Modules.LexicalAnalyzer.DetermineToken(System.Char)">
            <summary>
            Constructs token judjing by the 'remembered' variable.
            </summary>
            <returns>Retruns the next token for the list.</returns>
        </member>
        <member name="M:ERACompiler.Modules.LexicalAnalyzer.DoesMatch(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Checks if any of the elements from the given list starts with the given sequence of charachters.
            </summary>
            <param name="list">A list with strings.</param>
            <param name="sequence">A string for checking.</param>
            <returns>Whether or not there is a match.</returns>
        </member>
        <member name="M:ERACompiler.Modules.SemanticsAnalyzer.FindContext(ERACompiler.Structures.AASTNode)">
            <summary>
            Returns a context that the given node belongs to.
            </summary>
            <param name="node">Node for which we want to find its context.</param>
            <returns>Reference to the context.</returns>
        </member>
        <member name="T:ERACompiler.Modules.SyntaxAnalyzer">
            <summary>
            The purpose of this class it to check the code for syntax errors and build Abstract Syntax Tree that can be used by Semantic Analyzer.
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.SyntaxAnalyzer.#ctor">
            <summary>
            Used for initialization of some variables.
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.SyntaxAnalyzer.BuildAST(System.Collections.Generic.List{ERACompiler.Structures.Token})">
            <summary>
            Main function of the class. It checks the structure of the token list for syntax errors and if it 
            is correct, returns the root node of the constructed Abstract Syntax Tree.
            </summary>
            <param name="tokens">The list of tokens from Lexical Analyzer.</param>
            <returns>Constructed Abstract Syntax Tree.</returns>
        </member>
        <member name="M:ERACompiler.Modules.SyntaxAnalyzer.LocateStatementEnd(System.Collections.Generic.List{ERACompiler.Structures.Token})">
            <summary>
            Locates an index of the ending token of the statement
            </summary>
            <param name="tokens">Token list that starts with statement.</param>
            <returns>Returns an index of the ending token of the statement</returns>
        </member>
        <member name="M:ERACompiler.Modules.SyntaxAnalyzer.LocateRoutineEnd(System.Collections.Generic.List{ERACompiler.Structures.Token})">
            <summary>
            Locates an index of the ending token of the routine
            </summary>
            <param name="tokens">Token list that starts with routine.</param>
            <returns>Returns an index of the ending token of the routine</returns>
        </member>
        <member name="T:ERACompiler.Program">
            <summary>
            The entrance point of the compiler.
            </summary>
        </member>
        <member name="T:ERACompiler.Structures.AASTNode">
            <summary>
            Annotated AST node. It contains additional information about node's type and context.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.AASTNode.Value">
            <summary>
            Represents local value of the variable (if the node represents value reference, for example)
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.AASTNode.Parent">
            <summary>
            Parent node of the node.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.AASTNode.Children">
            <summary>
            Children nodes of this AAST node.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.AASTNode.Type">
            <summary>
            integer, array of 30 bytes, structure A, etc.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.AASTNode.Context">
            <summary>
            The context that this node owns.
            </summary>
        </member>
        <member name="M:ERACompiler.Structures.AASTNode.#ctor(ERACompiler.Structures.ASTNode,ERACompiler.Structures.Types.VarType)">
            <summary>
            Creates AAST without context in it.
            </summary>
            <param name="node">AST node to be annotated.</param>
            <param name="type">The type of AAST.</param>
        </member>
        <member name="T:ERACompiler.Structures.ASTNode">
            <summary>
            The class representing Abstract Syntax Tree node
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.ASTNode.Parent">
            <summary>
            Parent node. Only the root node has parent equals to null.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.ASTNode.Children">
            <summary>
            Child nodes of the node.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.ASTNode.CrspToken">
            <summary>
            The token of the source code that corresponds to this node.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.ASTNode.NodeType">
            <summary>
            Represents the type of an AST entry.
            </summary>
        </member>
        <member name="F:ERACompiler.Structures.ASTNode.level">
            <summary>
            How deep in the AST the node is located. Used for proper tabulation in the ToString() method.
            </summary>
        </member>
        <member name="M:ERACompiler.Structures.ASTNode.#ctor(ERACompiler.Structures.ASTNode,System.Collections.Generic.List{ERACompiler.Structures.ASTNode},ERACompiler.Structures.Token,ERACompiler.Structures.ASTNode.ASTNodeType)">
            <summary>
            Creates an AST node.
            </summary>
            <param name="parent">Ref to the parent AST node.</param>
            <param name="children">Ref to the list of AST children nodes.</param>
            <param name="token">Corresponding token from the lexical analyzer.</param>
            <param name="type">The type of the AST node (basically syntax rule).</param>
        </member>
        <member name="M:ERACompiler.Structures.ASTNode.ToString">
            <summary>
            
            </summary>
            <returns>A string in JSON format of the node and its children (works recursively).</returns>
        </member>
        <member name="T:ERACompiler.Structures.ASTNode.ASTNodeType">
            <summary>
            The type of the AST node.
            </summary>
        </member>
        <member name="T:ERACompiler.Structures.Context">
            <summary>
            Represents a single context in the program.
            Used to check declaration issues and variable resolution.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.Context.level">
            <summary>
            Used in ToString()
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.Context.Name">
            <summary>
            The name of the context
            </summary>
        </member>
        <member name="M:ERACompiler.Structures.Context.#ctor(System.String,ERACompiler.Structures.Context)">
            <summary>
            Creates a context instance.
            </summary>
            <param name="name">The name of the context (may not be uniqie).</param>
            <param name="parent">Parent context (may be null).</param>
        </member>
        <member name="M:ERACompiler.Structures.Context.GetVarValue(ERACompiler.Structures.ASTNode)">
            <summary>
            Searches for the variable and tries to return the AAST node corresponding to it. If there is no such variable, raises error.
            </summary>
            <param name="identifier">The identifier AAST node that refers to the variable.</param>
            <returns>Returns AAST node of the variable with the given identifier.</returns>
        </member>
        <member name="M:ERACompiler.Structures.Context.AddVar(ERACompiler.Structures.AASTNode,System.String)">
            <summary>
            Tries to add a new variable to the context. Raises error if the variable already exists.
            </summary>
            <param name="variable">The variable node.</param>
            <param name="identifier">The name of the variable node.</param>
        </member>
        <member name="M:ERACompiler.Structures.Context.LocateVar(System.String)">
            <summary>
            Searches for the variable recursively up in the context tree.
            </summary>
            <param name="identifier">Identifier of the variable to be found.</param>
            <returns>Null if there is no such variable in this context, AAST node with the variable if it exists.</returns>
        </member>
        <member name="T:ERACompiler.Structures.Rules.SyntaxRule">
            <summary>
            Represents a single syntax rule presented in the ERA language.
            Implements Builder pattern.
            </summary>
        </member>
        <member name="M:ERACompiler.Structures.Rules.SyntaxRule.SetType(ERACompiler.Structures.Rules.SyntaxRule.SyntaxRuleType)">
            <summary>
            Makes this rule terminal.
            It means 'rules' contains only one Terminal object
            </summary>
            <returns></returns>
        </member>
        <member name="T:ERACompiler.Structures.Token">
            <summary>
            Represents a token which is used by Syntax Analyzer.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.Token.Type">
            <summary>
            A type that token prepresents.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.Token.Value">
            <summary>
            A token value. For example, identifier name "arg1", or number 528.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.Token.Position">
            <summary>
            A position of the token in the source code in terms of lines and characters.
            </summary>
        </member>
        <member name="M:ERACompiler.Structures.Token.#ctor(ERACompiler.Structures.TokenType,System.String,ERACompiler.Structures.TokenPosition)">
            <summary>
            Allows to create token instances.
            </summary>
            <param name="type">The type of the token.</param>
            <param name="value">The value token has.</param>
            <param name="position">The position of the token in the source code.</param>
        </member>
        <member name="T:ERACompiler.Structures.TokenType">
            <summary>
            Represents a type of a token.
            </summary>
            <remarks>
            DO NOT CHANGE ORDER, ADD TO THE BOTTOM IF NEEDED!!!
            </remarks>
        </member>
        <member name="T:ERACompiler.Structures.TokenPosition">
            <summary>
            Position (in terms of line and characters on the line) of the token in the source code.
            </summary>
        </member>
        <member name="T:ERACompiler.Utilities.Logger">
            <summary>
            Used to log the compilation process and display all the errors in compilation.
            </summary>
        </member>
        <member name="P:ERACompiler.Utilities.Logger.LoggingMode">
            <summary>
            0 for file logging, 1 for console logging
            </summary>
        </member>
        <member name="M:ERACompiler.Utilities.Logger.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="path">Output file for logs.</param>
            <param name="enableLogging">Whether or not to log anything.</param>
        </member>
        <member name="M:ERACompiler.Utilities.Logger.#ctor(System.Boolean)">
            <summary>
            Constuctor without specification of the output file.
            </summary>
            <param name="enableLogging">Whether or not to log anything.</param>
        </member>
        <member name="M:ERACompiler.Utilities.Logger.LogException(System.Exception)">
            <summary>
            Logs exception to the specified log file.
            </summary>
            <param name="ex">Exception to be logged.</param>
        </member>
        <member name="M:ERACompiler.Utilities.Logger.LogError(ERACompiler.Utilities.Errors.CompilationError)">
            <summary>
            Logs the compilation error to the specified log file and exits the program exection.
            </summary>
            <param name="er">Error to be logged.</param>
        </member>
        <member name="M:ERACompiler.Utilities.Logger.EnableLogging">
            <summary>
            Enables the Logger to log compilation process to the file.
            </summary>
        </member>
        <member name="M:ERACompiler.Utilities.Logger.DisableLogging">
            <summary>
            Disables the Logger from logging compilation process to the file.
            </summary>
        </member>
        <member name="T:NativeMethods">
            <summary>
            Used for console allocation.
            </summary>
        </member>
    </members>
</doc>
