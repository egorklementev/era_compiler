<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ERACompiler</name>
    </assembly>
    <members>
        <member name="T:ERACompiler.Modules.Compiler">
            <summary> 
            The main abstraction class of the compiler. 
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.Compiler.#ctor">
            <summary>
            Constructor for the compiler. Initializates all the modules such as Lexical Analyzer, etc.
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.Compiler.Compile(System.String,ERACompiler.Modules.Compiler.CompilationMode)">
            <summary> 
             Main compiler function.       
            </summary>
            <returns>
             A string with the compiled source code. It is ready to be written to the file.
            </returns>
        </member>
        <member name="M:ERACompiler.Modules.Compiler.Compile(System.String)">
            <summary>
            General compilation function. Returns generated assembly code.
            </summary>
            <param name="sourceCode">A source code from a file.</param>
            <returns>Generated string of assembly commands.</returns>
        </member>
        <member name="T:ERACompiler.Modules.Compiler.CompilationMode">
            <summary>
            Represents a level of compilation.
            For example syntax means lexical analysis plus syntax analysis.
            </summary>
        </member>
        <member name="T:ERACompiler.Modules.LexicalAnalyzer">
            <summary>
            Contains functionality for conversion of source code of the program to the list of tokens.
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.LexicalAnalyzer.GetTokenList(System.String)">
            <summary>
            Converts a program source code to the list of tokens.
            </summary>
            <param name="sourceCode">A source code of a program loaded from the file.</param>
            <returns>A list of tokens constructed from the source code.</returns>
        </member>
        <member name="M:ERACompiler.Modules.LexicalAnalyzer.Analyze(System.Collections.Generic.List{ERACompiler.Structures.Token})">
            <summary>
            Used for correction and analysis of the token list.
            </summary>
            <param name="list">List with tokens to be analyzed.</param>
            <returns>Compressed and improved token list.</returns>
        </member>
        <member name="M:ERACompiler.Modules.LexicalAnalyzer.IsAbleToDetermineToken(System.Char)">
            <summary>
            Used for token determination.
            </summary>
            <returns>Whether or not is it possible to understand what token has to be added to the list.</returns>
        </member>
        <member name="M:ERACompiler.Modules.LexicalAnalyzer.DetermineToken(System.Char)">
            <summary>
            Constructs token judjing by the 'remembered' variable.
            </summary>
            <returns>Retruns the next token for the list.</returns>
        </member>
        <member name="M:ERACompiler.Modules.LexicalAnalyzer.DoesMatch(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Checks if any of the elements from the given list starts with the given sequence of charachters.
            </summary>
            <param name="list">A list with strings.</param>
            <param name="sequence">A string for checking.</param>
            <returns>Whether or not there is a match.</returns>
        </member>
        <member name="T:ERACompiler.Modules.SyntaxAnalyzer">
            <summary>
            The purpose of this class it to check the code for syntax errors and build Abstract Syntax Tree that can be used by Semantic Analyzer.
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.SyntaxAnalyzer.#ctor">
            <summary>
            Used for initialization of some variables.
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.SyntaxAnalyzer.BuildAST(System.Collections.Generic.List{ERACompiler.Structures.Token})">
            <summary>
            Main function of the class. It checks the structure of the token list for syntax errors and if it 
            is correct, returns the root node of the constructed Abstract Syntax Tree.
            </summary>
            <param name="tokens">The list of tokens from Lexical Analyzer.</param>
            <returns>Constructed Abstract Syntax Tree.</returns>
        </member>
        <member name="T:ERACompiler.Program">
            <summary>
            The entrance point of the compiler.
            </summary>
        </member>
        <member name="T:ERACompiler.Structures.ASTNode">
            <summary>
            The class representing Abstract Syntax Tree node
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.ASTNode.Parent">
            <summary>
            Parent node. Only the root node has parent equals to null.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.ASTNode.Children">
            <summary>
            Child nodes of the node.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.ASTNode.CrspToken">
            <summary>
            The token of the source code that corresponds to this node.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.ASTNode.Type">
            <summary>
            Represents the type of an AST entry.
            </summary>
        </member>
        <member name="T:ERACompiler.Structures.ASTNode.ASTNodeType">
            <summary>
            The type of the AST node.
            </summary>
        </member>
        <member name="T:ERACompiler.Structures.Token">
            <summary>
            Represents a token which is used by Syntax Analyzer.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.Token.Type">
            <summary>
            A type that token prepresents.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.Token.Value">
            <summary>
            A token value. For example, identifier name "arg1", or number 528.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.Token.Position">
            <summary>
            A position of the token in the source code in terms of lines and characters.
            </summary>
        </member>
        <member name="M:ERACompiler.Structures.Token.#ctor(ERACompiler.Structures.TokenType,System.String,ERACompiler.Structures.TokenPosition)">
            <summary>
            Allows to create token instances.
            </summary>
            <param name="type">The type of the token.</param>
            <param name="value">The value token has.</param>
            <param name="position">The position of the token in the source code.</param>
        </member>
        <member name="T:ERACompiler.Structures.TokenType">
            <summary>
            Represents a type of a token.
            </summary>
            <remarks>
            DO NOT CHANGE ORDER, ADD TO THE BOTTOM IF NEEDED!!!
            </remarks>
        </member>
        <member name="T:ERACompiler.Structures.TokenPosition">
            <summary>
            Position (in terms of line and characters on the line) of the token in the source code.
            </summary>
        </member>
        <member name="T:ERACompiler.Utilities.Logger">
            <summary>
            Used to log the compilation process and display all the errors in compilation.
            </summary>
        </member>
        <member name="M:ERACompiler.Utilities.Logger.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="path">Output file for logs.</param>
            <param name="enableLogging">Whether or not to log anything.</param>
        </member>
        <member name="M:ERACompiler.Utilities.Logger.#ctor(System.Boolean)">
            <summary>
            Constuctor without specification of the output file.
            </summary>
            <param name="enableLogging">Whether or not to log anything.</param>
        </member>
        <member name="M:ERACompiler.Utilities.Logger.LogException(System.Exception)">
            <summary>
            Logs exception to the specified log file.
            </summary>
            <param name="ex">Exception to be logged.</param>
        </member>
        <member name="M:ERACompiler.Utilities.Logger.LogError(ERACompiler.Utilities.Errors.CompilationError)">
            <summary>
            Logs the compilation error to the specified log file.
            </summary>
            <param name="er">Error to be logged.</param>
        </member>
        <member name="M:ERACompiler.Utilities.Logger.EnableLogging">
            <summary>
            Enables the Logger to log compilation process to the file.
            </summary>
        </member>
        <member name="M:ERACompiler.Utilities.Logger.DisableLogging">
            <summary>
            Disables the Logger from logging compilation process to the file.
            </summary>
        </member>
    </members>
</doc>
