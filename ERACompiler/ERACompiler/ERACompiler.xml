<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ERACompiler</name>
    </assembly>
    <members>
        <member name="T:ERACompiler.Modules.Compiler">
            <summary> 
            The main abstraction class of the compiler. 
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.Compiler.#ctor">
            <summary>
            Constructor for the compiler. Initializates all the modules such as Lexical Analyzer, etc.
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.Compiler.Compile(System.String,ERACompiler.Modules.Compiler.CompilationMode)">
            <summary> 
             Main compiler function.       
            </summary>
            <returns>
             A string with the compiled source code. It is ready to be written to the file.
            </returns>
        </member>
        <member name="M:ERACompiler.Modules.Compiler.Compile(System.String)">
            <summary>
            General compilation function. Returns generated assembly code.
            </summary>
            <param name="sourceCode">A source code from a file.</param>
            <returns>Generated string of assembly commands.</returns>
        </member>
        <member name="T:ERACompiler.Modules.Compiler.CompilationMode">
            <summary>
            Represents a level of compilation.
            For example syntax means lexical analysis plus syntax analysis.
            </summary>
        </member>
        <member name="T:ERACompiler.Modules.Generator">
            <summary>
            Generates the actual assembly code
            </summary>
        </member>
        <member name="T:ERACompiler.Modules.LexicalAnalyzer">
            <summary>
            Contains functionality for conversion of source code of the program to the list of tokens.
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.LexicalAnalyzer.GetTokenList(System.String)">
            <summary>
            Converts a program source code to the list of tokens.
            </summary>
            <param name="sourceCode">A source code of a program loaded from the file.</param>
            <returns>A list of tokens constructed from the source code.</returns>
        </member>
        <member name="M:ERACompiler.Modules.LexicalAnalyzer.Analyze(System.Collections.Generic.List{ERACompiler.Structures.Token})">
            <summary>
            Used for correction and analysis of the token list.
            </summary>
            <param name="list">List with tokens to be analyzed.</param>
            <returns>Compressed and improved token list.</returns>
        </member>
        <member name="M:ERACompiler.Modules.LexicalAnalyzer.IsAbleToDetermineToken(System.Char)">
            <summary>
            Used for token determination.
            </summary>
            <returns>Whether or not is it possible to understand what token has to be added to the list.</returns>
        </member>
        <member name="M:ERACompiler.Modules.LexicalAnalyzer.DetermineToken(System.Char)">
            <summary>
            Constructs token judjing by the 'remembered' variable.
            </summary>
            <returns>Retruns the next token for the list.</returns>
        </member>
        <member name="M:ERACompiler.Modules.LexicalAnalyzer.DoesMatch(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Checks if any of the elements from the given list starts with the given sequence of charachters.
            </summary>
            <param name="list">A list with strings.</param>
            <param name="sequence">A string for checking.</param>
            <returns>Whether or not there is a match.</returns>
        </member>
        <member name="M:ERACompiler.Modules.SemanticAnalyzer.CalculateConstExpr(ERACompiler.Structures.ASTNode,ERACompiler.Structures.Context)">
            <summary>
            Calculates a numerical value of a given constant expression
            </summary>
            <param name="node">Expected ASTType - Expression</param>
            <param name="ctx">Current context</param>
            <returns>Calculated value of an expression</returns>
        </member>
        <member name="M:ERACompiler.Modules.SemanticAnalyzer.GetOperandValue(ERACompiler.Structures.ASTNode,ERACompiler.Structures.Context)">
            <summary>
            Returns a value of a single operand.
            </summary>
            <param name="node">Expected ASTType - Operand</param>
            <param name="ctx">Current context</param>
            <returns>The value of an operand.</returns>
        </member>
        <member name="M:ERACompiler.Modules.SemanticAnalyzer.PostChecks(ERACompiler.Structures.AASTNode,ERACompiler.Structures.Context)">
            <summary>
            Performs additional checks after the AAST is constructed.
            </summary>
            <param name="node">Expected ASTType - Any node (preferrable Program)</param>
            <param name="ctx">Current context</param>
        </member>
        <member name="M:ERACompiler.Modules.SemanticAnalyzer.IsExprConstant(ERACompiler.Structures.ASTNode,ERACompiler.Structures.Context)">
            <summary>
            Checks whether an expression is constant.
            </summary>
            <param name="node">Expected ASTType - Expression</param>
            <param name="ctx">Current context</param>
            <returns>True if constant, false otherwise</returns>
        </member>
        <member name="T:ERACompiler.Modules.SyntaxAnalyzer">
            <summary>
            The purpose of this class it to check the code for syntax errors and build Abstract Syntax Tree that can be used by Semantic Analyzer.
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.SyntaxAnalyzer.#ctor">
            <summary>
            Used for initialization of some variables.
            </summary>
        </member>
        <member name="M:ERACompiler.Modules.SyntaxAnalyzer.CheckSyntax(System.Collections.Generic.List{ERACompiler.Structures.Token})">
            <summary>
            Validates the syntax correctness of the token stream
            and returns the AST root node if success.
            </summary>
            <param name="tokens">Tokens of a whole program to be validated.</param>
            <returns>A syntax responce instance which contains the AST root node.</returns>
        </member>
        <member name="T:ERACompiler.Program">
            <summary>
            The entrance point of the compiler.
            </summary>
        </member>
        <member name="T:ERACompiler.Structures.AASTNode">
            <summary>
            Annotated AST node. It contains additional information about node's type and context.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.AASTNode.AASTType">
            <summary>
            integer, array of 30 bytes, structure A, etc.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.AASTNode.AASTValue">
            <summary>
            Used to store values of constant variables. Used for compile-time 
            constant expression calculations and for storing initial values.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.AASTNode.Version">
            <summary>
            Used for SSA
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.AASTNode.Context">
            <summary>
            The context that this node owns.
            </summary>
        </member>
        <member name="T:ERACompiler.Structures.ASTNode">
            <summary>
            The class representing Abstract Syntax Tree node
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.ASTNode.Parent">
            <summary>
            Parent node. Only the root node has parent equals to null.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.ASTNode.Children">
            <summary>
            Child nodes of the node.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.ASTNode.Token">
            <summary>
            The token of the source code that corresponds to this node.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.ASTNode.ASTType">
            <summary>
            Represents the type of an AST entry.
            </summary>
        </member>
        <member name="F:ERACompiler.Structures.ASTNode.level">
            <summary>
            How deep in the AST the node is located. Used for proper tabulation in the ToString() method.
            </summary>
        </member>
        <member name="M:ERACompiler.Structures.ASTNode.#ctor(ERACompiler.Structures.ASTNode,System.Collections.Generic.List{ERACompiler.Structures.ASTNode},ERACompiler.Structures.Token,System.String)">
            <summary>
            Creates an AST node.
            </summary>
            <param name="parent">Ref to the parent AST node.</param>
            <param name="children">Ref to the list of AST children nodes.</param>
            <param name="token">Corresponding token from the lexical analyzer.</param>
            <param name="type">The type of the AST node (basically syntax rule).</param>
        </member>
        <member name="M:ERACompiler.Structures.ASTNode.ToString">
            <summary>
            
            </summary>
            <returns>A string in JSON format of the node and its children (works recursively).</returns>
        </member>
        <member name="T:ERACompiler.Structures.Context">
            <summary>
            Represents a single context in the program.
            Used to check declaration issues and variable resolution.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.Context.Level">
            <summary>
            Used in ToString()
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.Context.Name">
            <summary>
            The name of the context
            </summary>
        </member>
        <member name="M:ERACompiler.Structures.Context.#ctor(System.String,ERACompiler.Structures.Context)">
            <summary>
            Creates a context instance.
            </summary>
            <param name="name">The name of the context (may not be uniqie).</param>
            <param name="parent">Parent context (may be null).</param>
        </member>
        <member name="M:ERACompiler.Structures.Context.AddVar(ERACompiler.Structures.AASTNode,System.String)">
            <summary>
            Tries to add a new variable to the context. Raises error if the variable already exists.
            </summary>
            <param name="variable">The variable node.</param>
            <param name="identifier">The name of the variable node.</param>
        </member>
        <member name="M:ERACompiler.Structures.Context.GetConstValue(ERACompiler.Structures.Token)">
            <summary>
            Returns a value of a constant variable. Used for compile-time constant expression calculation and for retrieving intial values.
            </summary>
            <param name="identifier">The variable name.</param>
            <returns>Value of a constant variable.</returns>
        </member>
        <member name="M:ERACompiler.Structures.Context.IsVarConstant(ERACompiler.Structures.Token)">
            <summary>
            Checks if a variable with given name is constant
            </summary>
            <param name="identifier">A variable to check</param>
            <returns>True if var is constant, false otherwise</returns>
        </member>
        <member name="M:ERACompiler.Structures.Context.IsVarDeclared(ERACompiler.Structures.Token)">
            <summary>
            Checks if a variable with given identifier exists in current context
            </summary>
            <param name="identifier">The name of a variable.</param>
            <returns>True if it exists, false otherwise</returns>
        </member>
        <member name="M:ERACompiler.Structures.Context.UpdateVersion(ERACompiler.Structures.Token)">
            <summary>
            Updates the version of a variable. For SSA needs.
            </summary>
            <param name="identifier">The identifier of a variable.</param>
            <returns>Updated version.</returns>
        </member>
        <member name="M:ERACompiler.Structures.Context.GetVersion(ERACompiler.Structures.Token)">
            <summary>
            For SSA needs.
            </summary>
            <param name="identifier">The identifier of a variable.</param>
            <returns>Current variable version.</returns>
        </member>
        <member name="M:ERACompiler.Structures.Context.LocateVar(System.String)">
            <summary>
            Searches for the variable recursively up in the context tree.
            </summary>
            <param name="identifier">Identifier of the variable to be found.</param>
            <returns>Null if there is no such variable in this context, AAST node with the variable if it exists.</returns>
        </member>
        <member name="T:ERACompiler.Structures.Rules.SyntaxRule">
            <summary>
            Represents a single syntax rule presented in the ERA language.
            Implements Builder pattern.
            </summary>
        </member>
        <member name="F:ERACompiler.Structures.Rules.SyntaxRule.errorList">
            <summary>
            To store all possible syntax errors
            </summary>
        </member>
        <member name="F:ERACompiler.Structures.Rules.SyntaxRule.lastTokenPos">
            <summary>
            For getting the error token for debug needs
            </summary>
        </member>
        <member name="M:ERACompiler.Structures.Rules.SyntaxRule.#ctor">
            <summary>
            Constructor. Sets default rule name and initializes new rule list.
            </summary>
        </member>
        <member name="M:ERACompiler.Structures.Rules.SyntaxRule.SetName(System.String)">
            <summary>
            Sets a name for a rule. Used when printing the AST or AAST.
            </summary>
            <param name="name">A new name for a rule.</param>
            <returns>The object itself.</returns>
        </member>
        <member name="M:ERACompiler.Structures.Rules.SyntaxRule.SetType(ERACompiler.Structures.Rules.SyntaxRule.SyntaxRuleType)">
            <summary>
            Sets the type of a rule (e.g. OR, ONE_OR_MANY, etc.) 
            </summary>
            <returns>The object itself.</returns>
        </member>
        <member name="M:ERACompiler.Structures.Rules.SyntaxRule.AddRule(ERACompiler.Structures.Rules.SyntaxRule)">
            <summary>
            Adds a rule to the rule's children.
            How these children are processed depends on parent type.
            </summary>
            <param name="rule">A rule to add.</param>
            <returns>The object itself.</returns>
        </member>
        <member name="M:ERACompiler.Structures.Rules.SyntaxRule.Verify(System.Collections.Generic.List{ERACompiler.Structures.Token},ERACompiler.Structures.ASTNode,System.Int32)">
            <summary>
            Main function of this class. Given a list of tokens and parent AST node it returns
            a SyntaxResponse instance which contains information about success of failure of syntax
            checking, the number of tokens consumed (in the best case scenario should be equal to the 
            number of tokens received), and the parent AST node (that was given) filled with appropriate 
            AST children nodes according to this rule.
            </summary>
            <param name="tokens">The list of tokens.</param>
            <param name="parentNode">Parent node (is needed to construct AST)</param>
            <param name="tokenOffset">Offset in the token list to process tokens correctly (performance booster).</param>
            <returns></returns>
        </member>
        <member name="T:ERACompiler.Structures.Rules.SyntaxRule.SyntaxResponse">
            <summary>
            Used for communication with the parent rules.
            </summary>
        </member>
        <member name="M:ERACompiler.Structures.Rules.SyntaxRule.SyntaxResponse.#ctor(System.Boolean,System.Int32,ERACompiler.Structures.ASTNode)">
            <summary>
            Constructor. Sets success or failure, consumed token number, and oprionally ast node to return.
            </summary>
            <param name="success">Success or failure of rule checking</param>
            <param name="tokensConsumed">How many tokens were consumed</param>
            <param name="astNode">The AST node to return</param>
        </member>
        <member name="T:ERACompiler.Structures.Token">
            <summary>
            Represents a token which is used by Syntax Analyzer.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.Token.Type">
            <summary>
            A type that token prepresents.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.Token.Value">
            <summary>
            A token value. For example, identifier name "arg1", or number 528.
            </summary>
        </member>
        <member name="P:ERACompiler.Structures.Token.Position">
            <summary>
            A position of the token in the source code in terms of lines and characters.
            </summary>
        </member>
        <member name="M:ERACompiler.Structures.Token.#ctor(ERACompiler.Structures.TokenType,System.String,ERACompiler.Structures.TokenPosition)">
            <summary>
            Allows to create token instances.
            </summary>
            <param name="type">The type of the token.</param>
            <param name="value">The value token has.</param>
            <param name="position">The position of the token in the source code.</param>
        </member>
        <member name="M:ERACompiler.Structures.Token.#ctor(ERACompiler.Structures.Token)">
            <summary>
            Copy constructor
            </summary>
            <param name="other">Token to copy from</param>
        </member>
        <member name="M:ERACompiler.Structures.Token.ToString">
            <summary>
            To string
            </summary>
            <returns>A string representation of a token</returns>
        </member>
        <member name="T:ERACompiler.Structures.TokenType">
            <summary>
            Represents a type of a token.
            </summary>
            <remarks>
            DO NOT CHANGE ORDER, ADD TO THE BOTTOM IF NEEDED!!!
            </remarks>
        </member>
        <member name="T:ERACompiler.Structures.TokenPosition">
            <summary>
            Position (in terms of line and characters on the line) of the token in the source code.
            </summary>
        </member>
        <member name="T:NativeMethods">
            <summary>
            Used for console allocation.
            </summary>
        </member>
    </members>
</doc>
